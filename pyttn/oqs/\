import numpy as np
import scipy as sp


def bosonic_bath_properties(dk, zk, L, Lmin = None, combine_real=False, tol=1e-12, nbmax=1, nhilbmax=1000):
    ck = []
    nuk = []
    ds = []
    real_mode = []

    mode_dims = []
    mode_inds = []

    minzk = np.amin(np.real(zk))

    #first iterate through each of the nodes and determine if any of them are purely real.
    #in the case of a purely real mode we will only append a single term 
    if(Lmin == None):
        for i in range(len(dk)):
            nb = L

            #if we are combining two real frequency modes into a single mode 
            if(combine_real and np.imag(zk[i]) < tol):
                ds.append(nb)
                nuk.append(zk[i])
                ck.append(ck[i])
                real_mode.append(True)
            else
                ds.append(nb)
                ds.append(nb)
                real_mode.append(False)
                real_mode.append(False)
    else:
        for i in range(len(dk)):
            nb = max(int(L*minzk/np.real(zk[i])), Lmin)
            #if we are combining two real frequency modes into a single mode 
            if(combine_real and np.imag(zk[i]) < tol):
                ds.append(nb)
                zk.append(zk)
                real_mode.append(True)
            else
                ds.append(nb)
                ds.append(nb)
                zk.append(zk)
                zk.append(np.conj(zk))
                real_mode.append(False)
                real_mode.append(False)

    return real_mode

    minzk = np.amin(np.real(zk))
    if(Lmin == None):
        for i in range(len(dk)):
            nb = L
            ds[2*i+1] = nb
            ds[2*i+2] = nb
    else:
        for i in range(len(dk)):
            nb = max(int(L*minzk/np.real(zk[i])), Lmin)
            ds[2*i+1] = nb
            ds[2*i+2] = nb

    return ds


